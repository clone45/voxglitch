name: Build VCV Rack Plugin for macOS

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

env:
  rack-sdk-version: 2.6.4

jobs:
  build-macos:
    name: macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # Note: FFmpeg is built as part of the build process, not a git submodule

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install build dependencies
      run: |
        brew update
        brew install wget git autoconf automake libtool pkg-config

    - name: Download and setup VCV Rack SDK
      run: |
        cd $HOME
        wget https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-${{ matrix.arch }}.zip
        unzip Rack-SDK-${{ env.rack-sdk-version }}-mac-${{ matrix.arch }}.zip

        # Set environment variable for subsequent steps
        echo "RACK_DIR=$HOME/Rack-SDK" >> $GITHUB_ENV

    - name: Cache FFmpeg build
      id: cache-ffmpeg
      uses: actions/cache@v4
      with:
        path: |
          dep/lib
          dep/include
        key: ffmpeg-6.1-macos-${{ matrix.arch }}-v1
        restore-keys: |
          ffmpeg-6.1-macos-${{ matrix.arch }}-

    - name: Build FFmpeg dependency
      if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
      run: |
        # Create dep directory
        mkdir -p dep

        # Set architecture-specific flags for FFmpeg
        DEP_PATH="$(pwd)/dep"
        MAC_SDK_FLAGS="-mmacosx-version-min=10.13"

        # Add architecture-specific flags for cross-compilation
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          ARCH_FLAGS="-arch arm64"
          MAC_SDK_FLAGS="$MAC_SDK_FLAGS $ARCH_FLAGS"
        else
          ARCH_FLAGS="-arch x86_64"
          MAC_SDK_FLAGS="$MAC_SDK_FLAGS $ARCH_FLAGS"
        fi

        # Clone FFmpeg from official repo
        cd dep
        git clone --depth 1 --branch n6.1 https://github.com/FFmpeg/FFmpeg.git ffmpeg
        cd ffmpeg

        # Configure FFmpeg with minimal decoder-only build
        ./configure \
          --prefix="$DEP_PATH" \
          --extra-cflags="$MAC_SDK_FLAGS" \
          --extra-ldflags="$MAC_SDK_FLAGS" \
          --enable-pic \
          --enable-gpl \
          --disable-programs \
          --disable-doc \
          --disable-avdevice \
          --disable-swresample \
          --disable-swscale \
          --disable-postproc \
          --disable-avfilter \
          --disable-network \
          --disable-iconv \
          --disable-autodetect \
          --disable-asm \
          --disable-x86asm \
          --disable-everything \
          --enable-protocol=file \
          --enable-demuxer=wav \
          --enable-demuxer=aiff \
          --enable-demuxer=flac \
          --enable-demuxer=mov \
          --enable-demuxer=mp3 \
          --enable-decoder=pcm_s16le \
          --enable-decoder=pcm_s24le \
          --enable-decoder=pcm_f32le \
          --enable-decoder=pcm_s16be \
          --enable-decoder=pcm_s24be \
          --enable-decoder=pcm_f32be \
          --enable-decoder=flac \
          --enable-decoder=alac \
          --enable-decoder=mp3float \
          --enable-parser=mpegaudio

        # Build FFmpeg (use all CPU cores)
        make -j$(sysctl -n hw.ncpu)

        # Install to dep/ directory
        make install

    - name: Verify FFmpeg libraries
      run: |
        echo "Checking FFmpeg libraries:"
        ls -lh dep/lib/libav*.a || echo "FFmpeg libraries not found!"

        # Verify architecture of built libraries
        if [ -f dep/lib/libavcodec.a ]; then
          echo "Architecture of libavcodec.a:"
          lipo -info dep/lib/libavcodec.a
        fi

    - name: Build plugin
      run: |
        # Only set CROSS_COMPILE for x64 builds (cross-compiling from arm64)
        # macos-latest runners are arm64, so arm64 builds are native
        echo "Building for architecture: ${{ matrix.arch }}"

        if [ "${{ matrix.arch }}" = "x64" ]; then
          echo "Setting CROSS_COMPILE for x64 cross-compilation"
          export CROSS_COMPILE=x86_64-apple-darwin
        else
          echo "Native arm64 build - CROSS_COMPILE not set"
          unset CROSS_COMPILE
        fi

        echo "CROSS_COMPILE is: ${CROSS_COMPILE:-<not set>}"

        # Build the plugin
        make -j$(sysctl -n hw.ncpu) RACK_DIR=$HOME/Rack-SDK

        # Verify the plugin was built and check its architecture
        ls -lh plugin.dylib
        echo "Plugin architecture:"
        lipo -archs plugin.dylib

    - name: Create distribution package
      run: |
        # Only set CROSS_COMPILE for x64 builds
        if [ "${{ matrix.arch }}" = "x64" ]; then
          export CROSS_COMPILE=x86_64-apple-darwin
        else
          unset CROSS_COMPILE
        fi

        # Create the distribution package
        make dist RACK_DIR=$HOME/Rack-SDK

        # List the created distribution files
        echo "Distribution files:"
        ls -lh dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: voxglitch-macos-${{ matrix.arch }}-${{ github.run_number }}-${{ github.sha }}
        path: |
          dist/*.vcvplugin
        retention-days: 30

    - name: Upload release assets (if tagged)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.vcvplugin
        token: ${{ secrets.GITHUB_TOKEN }}
