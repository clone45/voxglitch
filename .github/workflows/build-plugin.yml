name: Build VCV Rack Plugin
on:
  [push, pull_request]

env:
  rack-sdk-version: 2.5.2
  rack-plugin-toolchain-dir: /home/build/rack-plugin-toolchain

defaults:
  run:
    shell: bash

jobs:

  build-linux:
    name: linux
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/qno/rack-plugin-toolchain-win-linux
      options: --user root
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache FFmpeg build
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: |
            dep/lib
            dep/include
            dep/ffmpeg
          key: ffmpeg-6.1-linux-toolchain-v3
          restore-keys: |
            ffmpeg-6.1-linux-toolchain-

      - name: Build plugin using toolchain
        run: |
          export PLUGIN_DIR=$GITHUB_WORKSPACE
          pushd ${{ env.rack-plugin-toolchain-dir }}
          make plugin-build-lin-x64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.rack-plugin-toolchain-dir }}/plugin-build
          name: linux

  build-windows:
    name: win
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            make
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-autotools
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-jq
            unzip
            wget

      - name: Download and setup VCV Rack SDK
        run: |
          cd $HOME
          wget https://vcvrack.com/downloads/Rack-SDK-2.6.4-win-x64.zip
          unzip Rack-SDK-2.6.4-win-x64.zip

      - name: Cache FFmpeg build
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: |
            dep/lib
            dep/include
            dep/ffmpeg
          key: ffmpeg-6.1-windows-native-v1
          restore-keys: |
            ffmpeg-6.1-windows-native-

      - name: Build FFmpeg dependency
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          make dep RACK_DIR=$HOME/Rack-SDK

      - name: Build plugin
        run: |
          make -j$(nproc) RACK_DIR=$HOME/Rack-SDK

      - name: Create distribution package
        run: |
          make dist RACK_DIR=$HOME/Rack-SDK

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.vcvplugin
          name: win

  build-mac:
    name: mac (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install build dependencies
        run: |
          brew update
          brew install wget git autoconf automake libtool pkg-config

      - name: Download and setup VCV Rack SDK
        run: |
          cd $HOME
          wget https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-${{ matrix.arch }}.zip
          unzip Rack-SDK-${{ env.rack-sdk-version }}-mac-${{ matrix.arch }}.zip
          echo "RACK_DIR=$HOME/Rack-SDK" >> $GITHUB_ENV

      - name: Cache FFmpeg build
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: |
            dep/lib
            dep/include
          key: ffmpeg-6.1-macos-${{ matrix.arch }}-v1
          restore-keys: |
            ffmpeg-6.1-macos-${{ matrix.arch }}-

      - name: Build FFmpeg dependency
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          make dep RACK_DIR=$HOME/Rack-SDK

      - name: Build plugin
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            export CROSS_COMPILE=x86_64-apple-darwin
          fi
          make -j$(sysctl -n hw.ncpu) RACK_DIR=$HOME/Rack-SDK
          lipo -archs plugin.dylib

      - name: Create distribution package
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            export CROSS_COMPILE=x86_64-apple-darwin
          fi
          make dist RACK_DIR=$HOME/Rack-SDK

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.vcvplugin
          name: mac-${{ matrix.arch }}
